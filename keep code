class CourseDetailsSerializer(serializers.ModelSerializer):
    assessment_type = AssessmentTypeSerializer(many=True)
    international_element = InternationalElementSerializer(many=True)

    class Meta:
        model = CourseDetails
        fields = ['course_details_id', 'program_id', 'course_organization', 'integrated_language',
                  'course_specialization', 'diploma_supplement', 'integrated_internship', 'integrated_foreign_language',
                  'assessment_type', 'international_element']

    def create(self, validated_data):
        assessment_type_datas = validated_data.pop('assessment_type')
        international_element_datas = validated_data.pop('international_element')
        course_details = CourseDetails.objects.create(**validated_data)

        for assessment_type_data in assessment_type_datas:
            course_details.assessment_type.create(**assessment_type_data)

        for international_element_data in international_element_datas:
            course_details.international_element.create(**international_element_data)

        return course_details

    def update(self, instance, validated_data):
        assessment_type_datas = validated_data.pop('assessment_type')
        instance.program_id = validated_data.get('program_id', instance.program_id)
        instance.course_organization = validated_data.get('course_organization', instance.course_organization)
        instance.integrated_language = validated_data.get('integrated_language', instance.integrated_language)
        instance.course_specialization = validated_data.get('course_specialization', instance.course_specialization)
        instance.diploma_supplement = validated_data.get('diploma_supplement', instance.diploma_supplement)
        instance.integrated_internship = validated_data.get('integrated_internship', instance.integrated_internship)
        instance.integrated_foreign_language = validated_data.get('integrated_foreign_language', instance.integrated_foreign_language)
        instance.international_element = validated_data.get('international_element', instance.international_element)

        instance.assessment_type.clear()

        for assessment_type_data in assessment_type_datas:
            assessment_type, created = AssessmentType.objects.get_or_create(**assessment_type_data)
            instance.assessment_type.add(assessment_type)
        instance.save()
        return instance