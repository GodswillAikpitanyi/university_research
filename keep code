class CourseDetailsSerializer(serializers.ModelSerializer):
    assessment_type = AssessmentTypeSerializer(many=True)
    international_element = InternationalElementSerializer(many=True)

    class Meta:
        model = CourseDetails
        fields = ['course_details_id', 'program_id', 'course_organization', 'integrated_language',
                  'course_specialization', 'diploma_supplement', 'integrated_internship', 'integrated_foreign_language',
                  'assessment_type', 'international_element']

    def create(self, validated_data):
        assessment_type_datas = validated_data.pop('assessment_type')
        international_element_datas = validated_data.pop('international_element')
        course_details = CourseDetails.objects.create(**validated_data)

        for assessment_type_data in assessment_type_datas:
            course_details.assessment_type.create(**assessment_type_data)

        return course_details

    def update(self, instance, validated_data):
        assessment_type_datas = validated_data.pop('assessment_type')
        international_element_datas = validated_data.pop('international_element')
        instance.program_id = validated_data.get('program_id')
        instance.course_organization = validated_data.get('course_organization')
        instance.integrated_language = validated_data.get('integrated_language')
        instance.course_specialization = validated_data.get('course_specialization')
        instance.diploma_supplement = validated_data.get('diploma_supplement')
        instance.integrated_internship = validated_data.get('integrated_internship')
        instance.integrated_foreign_language = validated_data.get('integrated_foreign_language')

        instance.assessment_type.clear()
        instance.international_element.clear()

        for assessment_type_data in assessment_type_datas:
            assessment_type, created = AssessmentType.objects.get_or_create(**assessment_type_data)
            instance.assessment_type.add(assessment_type)

        for international_element_data in international_element_datas:
            international_element, created = InternationalElement.objects.get_or_create(**international_element_data)
            instance.international_element.add(international_element)

        instance.save()
        return instance






class OnlineLearningSerializer(serializers.ModelSerializer):
    learning_elements = LearningElementSerializer(many=True)

    class Meta:
        model = OnlineLearning
        fields = ['online_program_id', 'program_id', 'online_adaptability', 'pace_of_course',
                  'attendance_phase_in_Nigeria', 'type_of_online_learning', 'learning_elements']

    def create(self, validated_data):
        learning_elements_datas = validated_data.pop('learning_elements')
        online_learning = OnlineLearning.objects.create(**validated_data)
        for learning_elements_data in learning_elements_datas:
            online_learning.learning_elements.create(**learning_elements_data)
        return online_learning

    def update(self, instance, validated_data):
        learning_elements_datas = validated_data.pop('learning_elements')
        instance.online_program_id = validated_data.get("online_program_id", instance.online_program_id)
        instance.program_id = validated_data.get("program_id", instance.program_id)
        instance.online_adaptability = validated_data.get("online_adaptability", instance.online_adaptability)
        instance.pace_of_course = validated_data.get("pace_of_course", instance.pace_of_course)
        instance.attendance_phase_in_Nigeria = validated_data.get("attendance_phase_in_Nigeria", instance.attendance_phase_in_Nigeria)
        instance.type_of_online_learning = validated_data.get("type_of_online_learning", instance.type_of_online_learning)
        instance.learning_elements.clear()
        for learning_elements_data in learning_elements_datas:
            learning_elements, created = LearningElement.objects.get_or_create(**learning_elements_data)
            instance.learning_elements.add(learning_elements)
            instance.save()
        return instance